window.browserFingerprint={async generateFingerprint(){const e={platform:navigator.platform,hardwareConcurrency:navigator.hardwareConcurrency||0,deviceMemory:navigator.deviceMemory||0,maxTouchPoints:navigator.maxTouchPoints||0,screen:{width:screen.width,height:screen.height,colorDepth:screen.colorDepth,pixelDepth:screen.pixelDepth},timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,timezoneOffset:(new Date).getTimezoneOffset(),webgl:this.getMachineWebGLFingerprint(),audio:await this.getMachineAudioFingerprint(),fonts:this.getSystemFonts(),connection:this.getNetworkHardwareInfo()},t=JSON.stringify(e);return{hash:await this.generateHash(t),details:e,raw:t}},getMachineWebGLFingerprint(){try{const e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");if(!t)return"no-webgl";const r=t.getExtension("WEBGL_debug_renderer_info"),n=t.getParameter(r?.UNMASKED_VENDOR_WEBGL||t.VENDOR);return{vendor:n,renderer:t.getParameter(r?.UNMASKED_RENDERER_WEBGL||t.RENDERER),maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxViewportDims:t.getParameter(t.MAX_VIEWPORT_DIMS),maxVertexAttribs:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVaryingVectors:t.getParameter(t.MAX_VARYING_VECTORS),maxFragmentUniforms:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),maxVertexUniforms:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS)}}catch(e){return"webgl-error"}},async getMachineAudioFingerprint(){try{const e=new(window.AudioContext||window.webkitAudioContext),t={sampleRate:e.sampleRate,maxChannelCount:e.destination.maxChannelCount,numberOfInputs:e.destination.numberOfInputs,numberOfOutputs:e.destination.numberOfOutputs,channelCount:e.destination.channelCount,state:e.state};return e.close(),JSON.stringify(t)}catch(e){return"audio-error"}},getSystemFonts(){const e=["monospace","sans-serif","serif"],t=["Segoe UI","Calibri","Consolas","Microsoft Sans Serif","San Francisco","Helvetica Neue","Monaco","Menlo","Ubuntu","Liberation Sans","DejaVu Sans","Noto Sans","Arial","Times New Roman","Courier New","Verdana","Georgia","Tahoma","Impact","Trebuchet MS","Comic Sans MS"],r=document.createElement("canvas").getContext("2d"),n="mmmmmmmmmmlli",o="72px",a={};for(const t of e)r.font=o+" "+t,a[t]=r.measureText(n).width;const i=[];for(const s of t){let t=!1;for(const i of e){r.font=o+" "+s+", "+i;if(r.measureText(n).width!==a[i]){t=!0;break}}t&&i.push(s)}return i.sort().join(",")},getNetworkHardwareInfo(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return e?{type:e.type||"unknown"}:"no-connection-api"},async generateHash(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map((e=>e.toString(16).padStart(2,"0"))).join("")},getMachineId(){const e={platform:navigator.platform,hardwareConcurrency:navigator.hardwareConcurrency||0,screen:screen.width+"x"+screen.height+"x"+screen.colorDepth,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,deviceMemory:navigator.deviceMemory||0};return btoa(JSON.stringify(e)).replace(/[^a-zA-Z0-9]/g,"").substring(0,16)}},window.rsaVerification={base64ToArrayBuffer(e){try{const t=e.replace(/[\s\n\r]/g,""),r=atob(t),n=new Uint8Array(r.length);for(let e=0;e<r.length;e++)n[e]=r.charCodeAt(e);return n.buffer}catch(e){throw console.error("Error converting base64 to ArrayBuffer:",e),e}},async importPublicKey(e){try{const t=atob(e);console.log("Decoded PEM content:",t);const r=t.split("\n"),n=[];let o=!1;for(const e of r)if(e.includes("BEGIN PUBLIC KEY")||e.includes("BEGIN RSA PUBLIC KEY"))o=!0;else{if(e.includes("END PUBLIC KEY")||e.includes("END RSA PUBLIC KEY"))break;o&&""!==e.trim()&&n.push(e.trim())}const a=n.join("");console.log("Extracted base64 key length:",a.length),console.log("Extracted base64 key (first 50 chars):",a.substring(0,50));const i=this.base64ToArrayBuffer(a);try{const e=await crypto.subtle.importKey("spki",i,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!1,["verify"]);return console.log("Successfully imported public key as SPKI format"),e}catch(e){console.warn("Failed to import as SPKI, trying other formats:",e);try{const e=await crypto.subtle.importKey("spki",i,{name:"RSA-PSS",hash:{name:"SHA-256"}},!1,["verify"]);return console.log("Successfully imported public key as RSA-PSS format"),e}catch(t){throw console.error("Failed to import key in any format"),e}}}catch(t){throw console.error("Failed to import public key:",t),console.error("Public key input (first 100 chars):",e.substring(0,100)),t}},async verifySignature(e,t,r){try{console.log("Starting signature verification..."),console.log("Data to verify (first 50 chars):",e.substring(0,50)),console.log("Signature (first 50 chars):",t.substring(0,50));const n=await this.importPublicKey(r),o=(new TextEncoder).encode(String(e)),a=t.replace(/[\s\n\r]/g,""),i=this.base64ToArrayBuffer(a);console.log("Data buffer length:",o.byteLength),console.log("Signature buffer length:",i.byteLength);const s=await crypto.subtle.verify({name:"RSASSA-PKCS1-v1_5"},n,i,o);return console.log("Signature verification result:",s),s}catch(e){return console.error("Signature verification failed:",e),console.error("Error details:",{name:e.name,message:e.message,stack:e.stack}),!1}},async testPublicKey(e){try{const t=await this.importPublicKey(e);return console.log("Public key test successful:",t),!0}catch(e){return console.error("Public key test failed:",e),!1}}};