@using Microsoft.Extensions.Options
@using MudBlazor
@using Nesco.Licensing.Core.Models
@using Nesco.Licensing.Core.Services
@using Nesco.Licensing.Services
@inject IClientTokenService ClientTokenService
@inject IBrowserFingerprintService BrowserFingerprintService
@inject ILicenseActivationService LicenseActivationService
@inject ISnackbar Snackbar
@inject IOptions<LicenseActivationSettings>? Settings

<MudCard Elevation="4" Style="max-width: 600px; margin: 0 auto;">
    <MudCardHeader>
        <CardHeaderContent>
            <div style="text-align: center;">
                <MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Primary" Size="Size.Large" />
                <MudText Typo="Typo.h5" Color="Color.Primary">License Activation</MudText>
            </div>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudAlert Severity="Severity.Info" Dense="true" Class="mb-4">
            <MudText><strong>Product:</strong> @ProductCode</MudText>
        </MudAlert>

        <MudForm Model="activationModel" @bind-IsValid="@isFormValid">
            <MudTextField @bind-Value="activationModel.LicenseToken"
                         For="@(() => activationModel.LicenseToken)"
                         Label="License Token"
                         Placeholder="Paste your license token here..."
                         Lines="4"
                         Variant="Variant.Outlined"
                         Required="true"
                         RequiredError="License token is required"
                         HelperText="Enter the complete license token provided by your vendor"
                         Class="mb-4" />

            <MudTextField @bind-Value="activationModel.CustomMachineId"
                         For="@(() => activationModel.CustomMachineId)"
                         Label="Machine ID (Optional)"
                         Placeholder="Leave empty for auto-detection"
                         Variant="Variant.Outlined"
                         HelperText="@(string.IsNullOrEmpty(MachineFingerprint) ? "Custom machine identifier, leave empty to use browser fingerprint" : "Machine fingerprint provided via parameter")"
                         ReadOnly="@(!string.IsNullOrEmpty(MachineFingerprint))"
                         Class="mb-4" />

            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      Size="Size.Large"
                      StartIcon="@Icons.Material.Filled.VpnKey"
                      OnClick="HandleActivation"
                      Disabled="@(!isFormValid || isProcessing || !string.IsNullOrEmpty(activationId) || isActivated)"
                      FullWidth="true">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Activating...</MudText>
                }
                else if (!string.IsNullOrEmpty(activationId))
                {
                    <MudText>License Activated</MudText>
                }
                else
                {
                    <MudText>Activate License</MudText>
                }
            </MudButton>
        </MudForm>
        
        
        @if (!string.IsNullOrEmpty(activationId))
        {
            <MudDivider Class="my-4" />
            
            <MudCard Outlined="true">
                <MudCardContent Class="py-2">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                        <MudText Typo="Typo.body2" Color="Color.Success">
                            <strong>License Activated Successfully!</strong>
                        </MudText>
                    </MudStack>
                    
                    <MudText Typo="Typo.caption" Class="mt-2">
                        <strong>Activation ID:</strong> @activationId
                    </MudText>
                </MudCardContent>
            </MudCard>
        }

        @if (tokenInfo != null)
        {
            <MudDivider Class="my-4" />
            
            <MudExpansionPanels Elevation="0" Outlined="true">
                <MudExpansionPanel Text="Token Information" Icon="@Icons.Material.Filled.Info">
                    <MudSimpleTable Dense="true" Striped="true">
                        <tbody>
                            <tr>
                                <td><strong>Product Code</strong></td>
                                <td>@tokenInfo.ProductCode</td>
                            </tr>
                            <tr>
                                <td><strong>License Key</strong></td>
                                <td><MudText Typo="Typo.caption">@tokenInfo.LicenseKey</MudText></td>
                            </tr>
                            @if (tokenInfo.ExpiryDate.HasValue)
                            {
                                <tr>
                                    <td><strong>Expiry Date</strong></td>
                                    <td>
                                        <MudChip T="string" 
                                                Color="@(ClientTokenService.IsTokenExpired(tokenInfo.ExpiryDate) ? Color.Error : Color.Success)" 
                                                Size="Size.Small">
                                            @tokenInfo.ExpiryDate.Value.ToString("yyyy-MM-dd HH:mm")
                                        </MudChip>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td><strong>License Type</strong></td>
                                    <td><MudChip T="string" Color="Color.Success" Size="Size.Small">Perpetual</MudChip></td>
                                </tr>
                            }
                            @if (!string.IsNullOrEmpty(tokenInfo.Params))
                            {
                                <tr>
                                    <td><strong>Parameters</strong></td>
                                    <td><MudText Typo="Typo.caption">@tokenInfo.Params</MudText></td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </MudCardContent>
</MudCard>

    <MudDialog @bind-Visible="showEulaDialog" Options="eulaDialogOptions">
        <DialogContent>
            <MudContainer Style="max-height: 70vh; overflow-y: auto;">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Filled.Gavel" Class="mr-2" />
                    End User License Agreement
                </MudText>
                
                <MudAlert Severity="Severity.Info" Dense="true" Class="mb-4">
                    <MudText Typo="Typo.body2">
                        <strong>@requiredEula?.Name (v@requiredEula.Version)</strong><br/>
                        Please review the terms and conditions below.
                    </MudText>
                </MudAlert>
                
                <MudPaper Elevation="1" Class="pa-4 mb-4" Style="max-height: 300px; overflow-y: auto; background-color: #fafafa;">
                    @if (requiredEula is { IsHtmlContent: true })
                    {
                        @((MarkupString)requiredEula.Content)
                    }
                    else
                    {
                        <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">@requiredEula?.Content</pre>
                    }
                </MudPaper>
                
                <MudGrid>
                    @if (string.IsNullOrEmpty(AcceptedByName))
                    {
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="eulaAcceptance.AcceptedByName"
                                         Label="Your Full Name"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         HelperText="Enter your full legal name" />
                        </MudItem>
                    }
                    @if (string.IsNullOrEmpty(AcceptedByEmail))
                    {
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="eulaAcceptance.AcceptedByEmail"
                                         Label="Your Email Address"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         HelperText="Enter your contact email" />
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudCheckBox @bind-Value="eulaAcceptance.IsAccepted"
                                    Label="@($"I have read, understood, and agree to be bound by the terms of this End User License Agreement ({requiredEula?.Name} v{requiredEula?.Version})")"
                                    Required="true"
                                    Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseEulaDialog" Color="Color.Default">Cancel</MudButton>
            <MudButton OnClick="AcceptEulaAndActivate" 
                      Color="Color.Primary" 
                      Variant="Variant.Filled"
                      Disabled="@(!eulaAcceptance.IsAccepted || isProcessing)"
                      StartIcon="@Icons.Material.Filled.VpnKey">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true"/>
                    <MudText>Accepting & Activating...</MudText>
                }
                else
                {
                    <MudText>Accept & Activate License</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

@code {
    [Parameter, EditorRequired] public string ProductCode { get; set; } = "";
    [Parameter] public string? ApiBaseUrl { get; set; } = "https://localhost:7135";
    [Parameter] public string? AcceptedByName { get; set; }
    [Parameter] public string? AcceptedByEmail { get; set; }
    [Parameter] public string? MachineFingerprint { get; set; }
    [Parameter] public EventCallback<TokenActivationResponse> OnActivationSuccess { get; set; }
    [Parameter] public EventCallback<string> OnActivationError { get; set; }

    private ActivationModel activationModel = new();
    private bool isFormValid;
    private bool isProcessing;
    private string activationId = "";
    private ClientLicenseTokenData? tokenInfo;
    private EulaInfo? requiredEula;
    private EulaAcceptanceInfo eulaAcceptance = new();
    private bool showEulaAcceptance = false;
    private bool showEulaDialog = false;
    private bool isActivated = false;
    
    private DialogOptions eulaDialogOptions = new()
    {
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        CloseButton = true,
        BackdropClick = false,
        CloseOnEscapeKey = true
    };

    public class ActivationModel
    {
        public string LicenseToken { get; set; } = "";
        public string CustomMachineId { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        // If MachineFingerprint parameter is provided, use it and disable manual input
        if (!string.IsNullOrEmpty(MachineFingerprint))
        {
            activationModel.CustomMachineId = MachineFingerprint;
        }
    }

    private async Task HandleActivation()
    {
        if (!isFormValid) return;

        // Validate ProductCode is provided
        if (string.IsNullOrWhiteSpace(ProductCode))
        {
            Snackbar.Add("ProductCode is required for activation", Severity.Error);
            await OnActivationError.InvokeAsync("ProductCode is required for activation");
            return;
        }

        isProcessing = true;
        StateHasChanged();

        try
        {
            // Validate token format and signature
            tokenInfo = ClientTokenService.DecodeToken(activationModel.LicenseToken);
            if (tokenInfo == null)
            {
                Snackbar.Add("Invalid token format", Severity.Error);
                await OnActivationError.InvokeAsync("Invalid token format");
                return;
            }

            // Validate product code (mandatory check)
            if (!ClientTokenService.ValidateProductCode(tokenInfo.ProductCode, ProductCode))
            {
                var errorMsg = $"Token is not valid for product '{ProductCode}'. Token is for product '{tokenInfo.ProductCode}'";
                Snackbar.Add(errorMsg, Severity.Error);
                await OnActivationError.InvokeAsync(errorMsg);
                return;
            }

            // Check if token is expired (mandatory check)
            if (ClientTokenService.IsTokenExpired(tokenInfo.ExpiryDate))
            {
                var expiryMsg = tokenInfo.ExpiryDate.HasValue 
                    ? $"License token expired on {tokenInfo.ExpiryDate.Value:yyyy-MM-dd HH:mm}"
                    : "License token has expired";
                Snackbar.Add(expiryMsg, Severity.Error);
                await OnActivationError.InvokeAsync(expiryMsg);
                return;
            }

            // Validate signature if public key is available
            var publicKey = GetPublicKey();
            if (!string.IsNullOrEmpty(publicKey))
            {
                if (! await ClientTokenService.ValidateTokenSignatureAsync(activationModel.LicenseToken, publicKey))
                {
                    Snackbar.Add("Invalid token signature", Severity.Error);
                    await OnActivationError.InvokeAsync("Invalid token signature");
                    return;
                }
            }

            // Generate machine fingerprint - use parameter if provided, otherwise use custom or auto-generated
            var machineId = !string.IsNullOrEmpty(MachineFingerprint) ? MachineFingerprint :
                           string.IsNullOrWhiteSpace(activationModel.CustomMachineId)
                               ? (await BrowserFingerprintService.GenerateFingerprintAsync()).Hash
                               : activationModel.CustomMachineId;

            // Prepare activation request (no EULA on first attempt)
            var request = new TokenActivationRequest
            {
                Token = activationModel.LicenseToken,
                MachineFingerprint = machineId,
                EulaAcceptance = null
            };

            // Call activation API through service
            var result = await LicenseActivationService.ActivateWithTokenAsync(request);

            if (result.Success)
            {
                activationId = result.ActivationId?.ToString() ?? "";
                showEulaAcceptance = false;
                isActivated = true;
                Snackbar.Add("License activated successfully!", Severity.Success);

                // Trigger success callback
                await OnActivationSuccess.InvokeAsync(result);
            }
            else if (result.RequiredEula != null && !string.IsNullOrEmpty(result.Error) && result.Error.Contains("EULA acceptance required"))
            {
                // EULA acceptance is required
                requiredEula = result.RequiredEula;
                eulaAcceptance.EulaId = requiredEula.Id;
                
                // Pre-fill EULA acceptance with parameters if provided
                if (!string.IsNullOrEmpty(AcceptedByName))
                {
                    eulaAcceptance.AcceptedByName = AcceptedByName;
                }
                if (!string.IsNullOrEmpty(AcceptedByEmail))
                {
                    eulaAcceptance.AcceptedByEmail = AcceptedByEmail;
                }
                
                // Mark that EULA is required and open dialog automatically
                showEulaAcceptance = true;
                isProcessing = false; // Stop processing to allow dialog interaction
                StateHasChanged();
                OpenEulaDialog();
            }
            else
            {
                var errorMsg = $"Activation failed: {result.Error}";
                Snackbar.Add(errorMsg, Severity.Error);
                await OnActivationError.InvokeAsync(errorMsg);
            }
        }
        catch (Exception ex)
        {
            var errorMsg = $"Activation error: {ex.Message}";
            Snackbar.Add(errorMsg, Severity.Error);
            await OnActivationError.InvokeAsync(errorMsg);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    
    private string? GetPublicKey()
    {
        return Settings?.Value?.PublicKey;
    }

    private void OpenEulaDialog()
    {
        showEulaDialog = true;
        StateHasChanged();
    }

    private void CloseEulaDialog()
    {
        showEulaDialog = false;
        showEulaAcceptance = false; // Also reset EULA acceptance state
        StateHasChanged();
    }

    private async Task AcceptEulaAndActivate()
    {
        // Validate EULA fields
        var finalName = !string.IsNullOrEmpty(AcceptedByName) ? AcceptedByName : eulaAcceptance.AcceptedByName;
        var finalEmail = !string.IsNullOrEmpty(AcceptedByEmail) ? AcceptedByEmail : eulaAcceptance.AcceptedByEmail;
        
        if (string.IsNullOrWhiteSpace(finalName))
        {
            Snackbar.Add("Name is required for EULA acceptance", Severity.Error);
            return;
        }
        if (string.IsNullOrWhiteSpace(finalEmail))
        {
            Snackbar.Add("Email is required for EULA acceptance", Severity.Error);
            return;
        }
        if (!eulaAcceptance.IsAccepted)
        {
            Snackbar.Add("You must accept the EULA to continue", Severity.Error);
            return;
        }
        
        // Update the eulaAcceptance with final values
        eulaAcceptance.AcceptedByName = finalName;
        eulaAcceptance.AcceptedByEmail = finalEmail;
        
        // Close the dialog
        showEulaDialog = false;
        isProcessing = true;
        StateHasChanged();

        try
        {
            // Generate machine fingerprint - use parameter if provided, otherwise use custom or auto-generated
            var machineId = !string.IsNullOrEmpty(MachineFingerprint) ? MachineFingerprint :
                           string.IsNullOrWhiteSpace(activationModel.CustomMachineId)
                               ? (await BrowserFingerprintService.GenerateFingerprintAsync()).Hash
                               : activationModel.CustomMachineId;

            // Prepare activation request
            var request = new TokenActivationRequest
            {
                Token = activationModel.LicenseToken,
                MachineFingerprint = machineId,
                EulaAcceptance = eulaAcceptance
            };

            // Call activation API through service
            var result = await LicenseActivationService.ActivateWithTokenAsync(request);

            if (result.Success)
            {
                activationId = result.ActivationId?.ToString() ?? "";
                showEulaAcceptance = false; // Hide EULA UI on success
                isActivated = true;
                Snackbar.Add("License activated successfully!", Severity.Success);

                // Trigger success callback
                await OnActivationSuccess.InvokeAsync(result);
            }
            else
            {
                var errorMsg = $"Activation failed: {result.Error}";
                Snackbar.Add(errorMsg, Severity.Error);
                await OnActivationError.InvokeAsync(errorMsg);
            }
        }
        catch (Exception ex)
        {
            var errorMsg = $"Activation error: {ex.Message}";
            Snackbar.Add(errorMsg, Severity.Error);
            await OnActivationError.InvokeAsync(errorMsg);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    
}