@using System.Net.Http.Json
@using LicenseActivation.Components
@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@using Nesco.Licensing.Core.Models
@using Nesco.Licensing.Core.Services
@using Nesco.Licensing.Services
@inject IClientTokenService ClientTokenService
@inject IBrowserFingerprintService BrowserFingerprintService
@inject ILicenseActivationService LicenseActivationService
@inject IJSRuntime JSRuntime
@inject IOptions<LicenseActivationSettings>? Settings

<div class="license-activation-container">
    <style>
        .license-activation-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .activation-header {
            text-align: center;
            margin-bottom: 30px;
            color: #2c3e50;
        }

        .activation-header h2 {
            margin: 0;
            font-size: 24px;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #34495e;
        }

        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 6px;
            font-size: 14px;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
            font-family: 'Courier New', monospace;
        }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .btn:hover:not(:disabled) {
            background: #2980b9;
            transform: translateY(-1px);
        }

        .btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
            transform: none;
        }

        .status-container {
            margin-top: 20px;
            padding: 15px;
            border-radius: 6px;
            font-weight: 500;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .heartbeat-info {
            margin-top: 15px;
            padding: 10px;
            background: #e8f4f8;
            border-radius: 4px;
            font-size: 12px;
            color: #2c3e50;
        }

        .token-info {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            font-size: 12px;
        }
        
        .eula-container {
            background: #fff;
            border: 2px solid #ffeaa7;
            border-radius: 6px;
            margin: 20px 0;
            overflow: hidden;
        }
        
        .eula-header {
            background: #fff3cd;
            padding: 15px;
            border-bottom: 1px solid #ffeaa7;
        }
        
        .eula-header h3 {
            margin: 0 0 5px 0;
            color: #856404;
            font-size: 16px;
            font-weight: 600;
        }
        
        .eula-content {
            max-height: 300px;
            overflow-y: auto;
            padding: 15px;
            background: #fafafa;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .eula-acceptance {
            padding: 15px;
            background: #f8f9fa;
            border-top: 1px solid #e1e5e9;
        }
        
        .eula-fields {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .eula-checkbox {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .eula-checkbox input[type="checkbox"] {
            width: auto;
            margin: 0;
        }
        
        .eula-checkbox label {
            margin: 0;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .status-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-dialog {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            max-width: 600px;
            max-height: 90vh;
            width: 90%;
            overflow: hidden;
            animation: slideIn 0.3s ease;
        }
        
        .modal-header {
            background: #fff3cd;
            padding: 20px;
            border-bottom: 1px solid #ffeaa7;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #856404;
            font-size: 18px;
            font-weight: 600;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #856404;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-close:hover {
            background: rgba(133, 100, 4, 0.1);
            border-radius: 50%;
        }
        
        .modal-body {
            max-height: 60vh;
            overflow-y: auto;
            padding: 20px;
            background: #fafafa;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .modal-footer {
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #e1e5e9;
        }
        
        .modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 15px;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @@keyframes slideIn {
            from { 
                opacity: 0; 
                transform: translateY(-50px) scale(0.9); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }
    </style>

    <div class="activation-header">
        <h2>License Activation</h2>
    </div>

    <div class="token-info">
        <strong>Product:</strong> @ProductCode
    </div>

    <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
        <div class="form-group">
            <label class="form-label" for="licenseToken">License Token *</label>
            <textarea class="form-input form-textarea" 
                     id="licenseToken"
                     @bind="licenseToken" 
                     placeholder="Paste your license token here..."
                     required></textarea>
        </div>

        <div class="form-group">
            <label class="form-label" for="machineId">Machine ID (Optional)</label>
            <input class="form-input" 
                   id="machineId"
                   type="text" 
                   @bind="customMachineId" 
                   placeholder="@(string.IsNullOrEmpty(MachineFingerprint) ? "Leave empty for auto-detection" : "Machine fingerprint provided via parameter")"
                   readonly="@(!string.IsNullOrEmpty(MachineFingerprint))" 
                   style="@(string.IsNullOrEmpty(MachineFingerprint) ? "" : "background-color: #f5f5f5; cursor: not-allowed;")" />
        </div>

        <button type="submit" class="btn" disabled="@(isProcessing || !string.IsNullOrEmpty(activationId))">
            @if (isProcessing)
            {
                <span class="spinner"></span>
                <span>Activating...</span>
            }
            else if (!string.IsNullOrEmpty(activationId))
            {
                <span>License Activated</span>
            }
            else
            {
                <span>Activate License</span>
            }
        </button>
    </form>
    
</div>

@if (showEulaDialog && requiredEula != null)
{
    <div class="modal-overlay" @onclick="CloseEulaDialog">
        <div class="modal-dialog" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>📋 End User License Agreement</h3>
                <button type="button" class="modal-close" @onclick="CloseEulaDialog">&times;</button>
            </div>

            <div class="modal-body">
                <p style="margin-bottom: 15px; color: #6c757d; font-size: 14px;">
                    <strong>@requiredEula.Name (v@requiredEula.Version)</strong><br/>
                    Please review the terms and conditions below.
                </p>

                @if (requiredEula.IsHtmlContent)
                {
                    @((MarkupString)requiredEula.Content)
                }
                else
                {
                    <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">@requiredEula.Content</pre>
                }
            </div>

            <div class="modal-footer">
                <div class="eula-fields">
                    @if (string.IsNullOrEmpty(AcceptedByName))
                    {
                        <div class="form-group">
                            <label class="form-label" for="eulaName">Your Full Name *</label>
                            <input class="form-input"
                                   id="eulaName"
                                   type="text"
                                   @bind="eulaAcceptance.AcceptedByName"
                                   placeholder="Enter your full legal name"
                                   required/>
                        </div>
                    }
                    @if (string.IsNullOrEmpty(AcceptedByEmail))
                    {
                        <div class="form-group">
                            <label class="form-label" for="eulaEmail">Your Email Address *</label>
                            <input class="form-input"
                                   id="eulaEmail"
                                   type="email"
                                   @bind="eulaAcceptance.AcceptedByEmail"
                                   placeholder="Enter your contact email"
                                   required/>
                        </div>
                    }
                </div>

                <div class="eula-checkbox">
                    <input type="checkbox" id="eulaAccept" @bind="eulaAcceptance.IsAccepted" required/>
                    <label for="eulaAccept" style="font-size: 14px; line-height: 1.4;">
                        I have read, understood, and agree to be bound by the terms of this End User License Agreement (@requiredEula.Name v@requiredEula.Version)
                    </label>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" @onclick="CloseEulaDialog">
                        Cancel
                    </button>
                    <button type="button" class="btn" @onclick="AcceptEulaAndActivate" disabled="@(!eulaAcceptance.IsAccepted || isProcessing)">
                        @if (isProcessing)
                        {
                            <span class="spinner"></span>
                            <span>Accepting & Activating...</span>
                        }
                        else
                        {
                            <span>Accept & Activate License</span>
                        }
                    </button>
                </div>
            </div>
        </div>
        }
        }

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="status-container @GetStatusClass()">
                @statusMessage
            </div>
        }

    </div>

    <script>
    window.licenseActivationUtils = {
        copyToClipboard: function(text) {
            navigator.clipboard.writeText(text).then(function() {
                console.log('Copied to clipboard');
            });
        },
        
        showNotification: function(message, type = 'info') {
            // Simple notification system
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};
                color: white;
                border-radius: 4px;
                z-index: 10000;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                transition: opacity 0.3s ease;
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }
    };
</script>

@code {
    [Parameter, EditorRequired] public string ProductCode { get; set; } = "";
    [Parameter] public string? ApiBaseUrl { get; set; } ="";
    [Parameter] public string? AcceptedByName { get; set; }
    [Parameter] public string? AcceptedByEmail { get; set; }
    [Parameter] public string? MachineFingerprint { get; set; }
    [Parameter] public EventCallback<TokenActivationResponse> OnActivationSuccess { get; set; }
    [Parameter] public EventCallback<string> OnActivationError { get; set; }

    private string licenseToken = "";
    private string customMachineId = "";
    private string statusMessage = "";
    private string activationId = "";
    private bool isProcessing = false;
    private EulaInfo? requiredEula;
    private EulaAcceptanceInfo eulaAcceptance = new();
    private bool showEulaAcceptance = false;
    private bool showEulaDialog = false;

    protected override void OnInitialized()
    {
        // If MachineFingerprint parameter is provided, use it and disable manual input
        if (!string.IsNullOrEmpty(MachineFingerprint))
        {
            customMachineId = MachineFingerprint;
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(licenseToken))
        {
            await ShowError("Please enter a license token");
            return;
        }

        // Validate ProductCode is provided
        if (string.IsNullOrWhiteSpace(ProductCode))
        {
            await ShowError("ProductCode is required for activation");
            return;
        }

        isProcessing = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            // Use Utilities class to validate token
            var publicKey = GetPublicKey();
            var (isValid, errorMessage, tokenData) = await ActivationUtilities.ValidateLicenseToken(
                licenseToken, ProductCode, ClientTokenService, publicKey);
            
            if (!isValid)
            {
                await ShowError(errorMessage!);
                return;
            }

            // Generate machine fingerprint - use parameter if provided, otherwise use custom or auto-generated
            var machineId = !string.IsNullOrEmpty(MachineFingerprint) ? MachineFingerprint :
                           string.IsNullOrWhiteSpace(customMachineId) 
                               ? (await BrowserFingerprintService.GenerateFingerprintAsync()).Hash
                               : customMachineId;

            // Prepare activation request (no EULA on first attempt)
            var request = new TokenActivationRequest
            {
                Token = licenseToken,
                MachineFingerprint = machineId,
                EulaAcceptance = null
            };

            // Call activation API through service
            var result = await LicenseActivationService.ActivateWithTokenAsync(request);
            
            if (result.Success)
            {
                activationId = result.ActivationId?.ToString() ?? "";
                showEulaAcceptance = false;
                ShowSuccess("License activated successfully!");
                await JSRuntime.InvokeVoidAsync("licenseActivationUtils.showNotification", "License activated successfully!", "success");
                
                // Trigger success callback
                await OnActivationSuccess.InvokeAsync(result);
            }
            else if (ActivationUtilities.IsEulaRequired(result))
            {
                // EULA acceptance is required
                requiredEula = result.RequiredEula;
                eulaAcceptance.EulaId = requiredEula!.Id;
                
                // Pre-fill EULA acceptance with parameters if provided
                if (!string.IsNullOrEmpty(AcceptedByName))
                {
                    eulaAcceptance.AcceptedByName = AcceptedByName;
                }
                if (!string.IsNullOrEmpty(AcceptedByEmail))
                {
                    eulaAcceptance.AcceptedByEmail = AcceptedByEmail;
                }
                
                // Mark that EULA is required and open dialog automatically
                showEulaAcceptance = true;
                isProcessing = false; // Stop processing to allow dialog interaction
                StateHasChanged();
                OpenEulaDialog();
            }
            else
            {
                await ShowError($"Activation failed: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await ShowError($"Activation error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }

    private async Task ShowError(string message)
    {
        statusMessage = message;
        await OnActivationError.InvokeAsync(message);
        StateHasChanged();
    }

    private string GetStatusClass()
    {
        if (string.IsNullOrEmpty(statusMessage))
            return "status-info";
            
        if (statusMessage.Contains("success") || statusMessage.Contains("activated"))
            return "status-success";
        if (statusMessage.Contains("error") || statusMessage.Contains("failed") || statusMessage.Contains("Invalid"))
            return "status-error";
        if (statusMessage.Contains("EULA") || statusMessage.Contains("accept"))
            return "status-warning";
        return "status-info";
    }

    private string? GetPublicKey()
    {
        return Settings?.Value?.PublicKey;
    }

    private void OpenEulaDialog()
    {
        showEulaDialog = true;
        StateHasChanged();
    }

    private void CloseEulaDialog()
    {
        showEulaDialog = false;
        showEulaAcceptance = false; // Also reset EULA acceptance state
        StateHasChanged();
    }

    private async Task AcceptEulaAndActivate()
    {
        // Use Utilities class to validate EULA and get final values
        var (isValid, errorMsg) = ActivationUtilities.ValidateEulaAcceptance(
            eulaAcceptance.AcceptedByName, 
            eulaAcceptance.AcceptedByEmail,
            eulaAcceptance.IsAccepted,
            AcceptedByName,
            AcceptedByEmail);
        
        if (!isValid)
        {
            await ShowError(errorMsg!);
            return;
        }
        
        // Get final values using Utilities
        var (finalName, finalEmail) = ActivationUtilities.GetFinalEulaValues(
            eulaAcceptance.AcceptedByName,
            eulaAcceptance.AcceptedByEmail,
            AcceptedByName,
            AcceptedByEmail);
        
        // Update the eulaAcceptance with final values
        eulaAcceptance.AcceptedByName = finalName;
        eulaAcceptance.AcceptedByEmail = finalEmail;
        
        // Close the dialog
        showEulaDialog = false;
        isProcessing = true;
        StateHasChanged();

        try
        {
            // Generate machine fingerprint - use parameter if provided, otherwise use custom or auto-generated
            var machineId = !string.IsNullOrEmpty(MachineFingerprint) ? MachineFingerprint :
                           string.IsNullOrWhiteSpace(customMachineId) 
                               ? (await BrowserFingerprintService.GenerateFingerprintAsync()).Hash
                               : customMachineId;

            // Prepare activation request
            var request = new TokenActivationRequest
            {
                Token = licenseToken,
                MachineFingerprint = machineId,
                EulaAcceptance = eulaAcceptance
            };

            // Call activation API through service
            var result = await LicenseActivationService.ActivateWithTokenAsync(request);
            
            if (result.Success)
            {
                activationId = result.ActivationId?.ToString() ?? "";
                showEulaAcceptance = false; // Hide EULA UI on success
                ShowSuccess("License activated successfully!");
                await JSRuntime.InvokeVoidAsync("licenseActivationUtils.showNotification", "License activated successfully!", "success");
                
                // Trigger success callback
                await OnActivationSuccess.InvokeAsync(result);
            }
            else
            {
                await ShowError($"Activation failed: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            await ShowError($"Activation error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

 
}
}